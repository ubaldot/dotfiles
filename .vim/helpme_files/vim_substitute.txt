SUBSTITUTE
----------

:[range]s[ubstitute]/pattern/new/[gci]

replace "pattern" with "new" for all the lines in range.
gci = global, ask for confirmation, case sensitive.

OBS: Instead of using the delimiter / you can use the delimiter : so you avoid
things like this -> \\/\//\/\\/

Example:
:10,29s:foo:bar:g

EXAMPLES
--------
:10,15s:foo:bar:g   Replace foo with bar in lines 10--15
:%s/./bar/g         Replace all characters of non-empty lines with bar in the whole file
:%s/.\w*/bar/g      Replace all the words of non-empty lines with bar in the whole file
:%s:\s*$::g         Remove all the blanks at the end of the line in the whole file
:.,$/"//g           Remove all the " from the current line to the end of the file
:%s:^\s*$:bar:g     Replace all the blank lines with bar in the whole file
:%s/foo/<c-r>a/g    Replace foo with the content of register a in the whole file


RANGES
------
:13,15          from line 13 to line 15
:13,+3          from line 13 to line 13+3
:'t,$           from marker t to the end of file
:.,+5           from current line to current line+5
:.,$            from current line to the end

For custom ranges, use :g (global)

PATTERNS
--------
foo         foo
\<foo\>     foo (match case)
^\s*$       empty-lines

FUNCTION
--------

GetString() -> substitute(path, sub, flags)

sub: you can use \= and then add an expression, or you can use a Funcref that
takes one argument (most often, you use a lambda).

var text = "Hello \\123world\\045!"
echom substitute(text, '\\\(\o\o\o\)', (m) => nr2char(str2nr(m[1], 8)), 'g')

The substitute call is made using a lambda function: (m) => str2nr(m[1], 8)
where m is the array of match m[i] corresponds to submatch(i).
m[0] is the whole.

If you need a for loop and if then else then use map, lambdas and ternary operators.

REGEX
-----
very-magic is only for avoiding escaping everything.
Tips:

If you want to add/remove things at the beginning/end of a match, use \0 or m[0]
  'some nice word'->substitute('nice', 'x\0x', '') # This change 'nice' with 'xnice'
  'some nice word'->substitute('nice', (m) => m[0][1 : -2], '') # This change 'nice' with 'ic'

Use groups \( \) and refer to them with \1, \2, ... or m[1], m[2], etc.
Always match what you want to keep and not what you want to remove!

To see what are the various \s, \S, etc. just use :h \S.

\zs and \ze are used for submatch. Useful when you match something that you
have to highlight only a part of it.
  \s*\zspippo\ze\_.* # match lines starting with \* but then it only consider
  pippo as a match.
