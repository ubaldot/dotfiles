GENERAL STRUCTURE

def get_next_shape(vt, ...):
    # Create the new object based on vt
    return mobj # usually a vgrp

# Initialization
vt0 = 0
vt = mn.ValueTracker(vt0) # This is the independent object
mob = get_next_shape(vt, ...)
self.add(mob)

# Step function. The call is similar to def myupdater(self)
# Won't return anything
def myupdater(vgrp):
    vgrp_next = get_next_shape(vt)
    vgrp.become(vgrp_next)

mob.add_updater(myupdater) # OBS myupdater function takes ONLY one argument

# The above step function can be replaced with the following

mob = mn.always_redraw(lambda: get_next_shape(vt))

# Iterations (continuous)
self.play(vt.animate.set_value(5))
self.wait()
self.play(vt.animate.set_value(-2.3))
self.wait()
mob.clear_updaters() # Now mob has its final state.

# --------------------
# Avoid external initialization

# Empty mobject
mymob = mn.VMobject()

def myupdater(mob):
    next_mob = get_next_shape(vt)
    mob.become(next_mob)

# The call_updater call the updater for t = 0.
mymob.add_updater(mob, call_updater = True)

self.play(vt.animate_set_value(3))
mymob.clear_updaters() # Now mob has its final state.

# Iteration (discrete). In this case you don't need a value tracker
for t in time:
    self.play(

# or, you can use int(vt.get_value()).
