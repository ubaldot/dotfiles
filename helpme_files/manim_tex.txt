TEX

\math* is changed to \sym*, e.g. \mathbf{} becomes \symbf{}, see
  unicode-math LaTeX package for more info.

For the text, then you have \textbf{} can be replaced with \FSBlack{}, see
  myconfig

LaTeX input can be written as:

    1. One string
    2. Comma-separated strings

Avoid using f-strings, too many {} that collide with LaTeX. Use modulo format (%s) instead:

    x = 1.1
    y = 2.1
    t = MathTex(r"\sqrt{%s^2+%s^2}" %(x,y))
    self.add(t)


One string
-----------
If the input of a MathTex/Tex is only one string:

    t = mn.Tex(r"This is just an example $x+1=0$")

then it is accessed with t[0] and t[0][3] indicate the third rendered object.

To print all rendered objects, use

    print(pmatrix.tex_strings)

To visualize all the rendered objects, use

    indices = mn.index_labels(pmatrix[0])
    self.add(pmatrix, indices)

At this point you can refer to a specific object with e.g. myObj = t[0][3:8]


Comma-separated strings (do this if you use f-strings or %.2f)
--------------------------------------------------------------
You comma separate the strings:

        x = 3.2
        t = Tex(
        r"This is just an example: ",
        "$\mathrm{MyVec}$",
        f"$=({x},y)$")

Here you can access t[0], t[1], etc.

=> OBS! Each part must be buildable with LaTeX (e.g. r"\begin{pmatrix}", alone is
not buildable)

=> If things get hard, define your own tex_environment and pass it as
tex_environment= argument, see examples.

=> f-string and latex fight against one each other. Use modulo string
formatting, e.g.

    x = mn.MathTex(r"\mathFSB{Rome} = (%.2f, %.2f)" %(x.get_value(), y.get_value())

To align commas and automatically adjust parenthesis in animations, look at
ErrorAQI class in 07_Norms.

How to isolate elements
-----------------------
Use
    *.group_shapes_in_text() - external, search by Mobject
    Use t[0], t[1], ... if the string is separated by commas or
    Use e.g. t[0][3:8] if the string is a single string, with the aid of indices
    (DON'T USE) *.get_parts_by_tex() - builtin, search by text, requires comma-separated

Examples:

    r_tex = t.get_parts_by_tex(f"$\mathrm{MyVec}$").to_corner(mn.UR) # BAD
    r_tex = sst.group_shapes_in_text(pmatrix, mn.MathTex("3")).to_corner(mn.UR)
    r_tex = t[3]
    r_tex = t[0][3:8]



How to deal with matrices
-------------------------
Don't get mad. Use mn.Matrix or mn.DecimalMatrix or IntegerMatrix.

Otherwise with LaTeX is as follows.
The ideal would be to comma-separate rows and recall them with m[0], m[1], ... but you have the
problem of the first and last lime \begin{pmatrix}. How shall be rendered?
=> You create a new environment

        temp = mycfg.myTexTemplate
        temp.add_to_preamble(r"\newenvironment{mymatrix}{\begin{equation*}\begin{pmatrix}}{\end{pmatrix}\end{equation*}}")
        x = 0
        y = 1.1
        m = mn.Tex(
                rf"{x} & 4 \\",
                f"{y} & -1",
                tex_environment="mymatrix",
                tex_template=temp
                )

        self.add(m)
        self.add(m, m[1][:-1].to_corner(mn.DL), m[0][1].to_corner(mn.UR))

Now you can access elements with m[i][j].

Some examples:
--------------
1) Write all in one single string and cherry pick shapes with
sst.group_shapes_in_text():

        pmatrix = mn.MathTex(
            r"""
            \begin{pmatrix}
            1 & 3 \\
            3 & 0
            \end{pmatrix}
        """,
        )

        # You capture the mobject, now move it around!
        r_tex = sst.group_shapes_in_text(pmatrix, mn.MathTex("3")).to_corner(mn.UR)

2) Separate by commas and use .get_parts_by_tex(). In this case each line
shall be buildable

        t = Tex(
        r"This is just an example: ", # 0
        "$\mathrm{MyVec}$", # 1
        "$=(x,y)$") # 2

        # You capture the tex part, now move it around!
        # BAD (because the next is equivalent)
        r_tex = t.get_parts_by_tex("MyVec")
        # GOOD
        r_tex = t[1]

No need to use substrings_to_isolate.


How substrings_to_isolate works? (DON'T USE)
-------------------------------------------
Don't use because it is equivalent to breakdown a LaTeX expression with commas.
Anyway, it isolate the string and each line is wrapper around a
\begin{center}\end{center} environment:

    t = Tex(r"This is just an example: $\mathrm{MyVec}=(x,y)$", substrings_to_isolate=["MyVec"])

is broken into (manim automatically adds the missing {'s or }'s)

    This is just an example: $\mathrm{}
    MyVec
    {}=(x,y)$

Here is what is sent to Manim:

    % snippet 1
    \begin{center}
    This is just an example: $\mathrm{}
    \end{center}

    % snippet 2
    \begin{center}
    MyVec
    \end{center}

    % snippet 3
    \begin{center}
    {}=(x,y)$
    \end{center}

To overcome the issue in the example, then use substrings_to_isolate=[r"$\mathrm{MyVec}$"]


Few more complex examples:
---------------------------
Example with search_shapes_in_text:

        numbers = [3.5, -11.8]
        my_vec = MathTex(
            r"\mathbf{MyVec}= \begin{pmatrix} %s \end{pmatrix}"
            % " & ".join([str(n) for n in numbers])
            ).to_corner(DR, buff=1)
        myvec = group_shapes_in_text(my_vec, MathTex(r"\mathbf{MyVec}"))
        number1 = group_shapes_in_text(my_vec, MathTex(str(numbers[0])))
        number2 = group_shapes_in_text(my_vec, MathTex(str(numbers[1])))



# Tex() VS MathTex() VS tex_environment.
# Tex() is equivalent to
    \begin{document}
    \begin{center}
    % strings passed to Tex() go here
    \end{center}
    \end{document}

# MathTex() is equivalent to
    \begin{document}
    \begin{align}
    % strings passed to MathTex() go here
    \end{align}
    \end{document}

# If you don't want align or center, but e.g. tabular or figure, you pass in the
# tex_environment argument of Tex.
# e.g. Tex(r"pippo", tex_environment="{tabular}{|p{2cm}|p{2cm}|}") returns:

\begin{document}
\begin{tabular}{|p{2cm}|p{2cm}|}
% strings passed to Tex() go here
\end{tabular}
\end{document}

# Tables are mess. Manim is not super, better making them in LaTeX.
# But you cannot set colors in LaTeX, you have to do it in Manim.
# Also, you have to tell Manim which environment you are using.

template = mn.TexTemplate()
template.add_to_preamble(r"\def\arraystretch{1.5}")

t = mn.Tex(
    r"Qualitative name & Index or sub-index  & \multicolumn{4}{|c|}{Pollutant (hourly) concentration $[\mu g/m^3$]} \\"
    r"\hline ",
    r" && $NO_2$ & $PM_{10}$ & $O_3$ & $PM_{2.5}$ \\",
    r"\hline ",
    r"Very low", # This is t[4]
    r"& 0-25 & 0-50 & 0-25 & 0-60 & 0-15 \\",
    r"Low",
    r"& 25-50 & 50-100 & 25-50 & 60-120 & 15-30 \\",
    r"Medium",
    r"& 50-75 & 100-200 & 50-90 & 120-180 & 30-55 \\",
    r"High",
    r"& 75-100 & 200-400 & 90-180 & 180-240 & 55-110 \\",
    r"Very High",
    r"& $>100$ & $>400$ & $>180$ & $>240$ & $>110$ \\",
    tex_template=template,
    tex_environment="{tabular}{|p{2cm}|p{2cm}|p{2cm}|p{2cm}|p{2cm}|p{2cm}|}",
).scale_to_fit_width(12)



Matrices (don't use)
    dns = VGroup(*[DecimalNumber(val, num_decimal_places=1).scale(0.5) for val in [3.2, 0.8]])
    template = TexTemplate()
    template.add_to_preamble(r"\newenvironment{mymatrix}{\begin{equation*}\begin{pmatrix}}{\end{pmatrix*}\end{equation}}")
    my_vec = Tex(
            f"{dns[0].get_value()} & ",
            f"{dns[1].get_value()}",
            tex_environment="mymatrix",
            tex_template=template
            )
    self.add(my_vec)
